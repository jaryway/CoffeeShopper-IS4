using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Loader;
using System.Text;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis;

namespace DynamicBuilder
{
    public class DynamicAssemblyBuilder
    {
        private readonly static string AssemblyName = "DynamicAssembly";
        private AssemblyLoadContext _assemblyLoadContext;
        private readonly Dictionary<string, string> sourceCodeDict = [];
        public DynamicAssemblyBuilder()
        {
            _assemblyLoadContext = new AssemblyLoadContext(Guid.NewGuid().ToString(), true);
            sourceCodeDict.Add("_Migrations\\ApplicationDbContextModelSnapshot.cs", @"// <auto-generated />
using DynamicBuilder;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DynamicBuilder.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation(""ProductVersion"", ""8.0.6"")
                .HasAnnotation(""Relational:MaxIdentifierLength"", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity(""DynamicBuilder.Models.Author"", b =>
                {
                    b.Property<int>(""Id"")
                        .ValueGeneratedOnAdd()
                        .HasColumnType(""int"");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>(""Id""));

                    b.Property<string>(""FirstName"")
                        .HasColumnType(""longtext"");

                    b.Property<string>(""LastName"")
                        .HasColumnType(""longtext"");

                    b.HasKey(""Id"");

                    b.ToTable(""Authors"", (string)null);
                });

            modelBuilder.Entity(""DynamicBuilder.Models.Book"", b =>
                {
                    b.Property<int>(""Id"")
                        .ValueGeneratedOnAdd()
                        .HasColumnType(""int"");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>(""Id""));

                    b.Property<int>(""AuthorId"")
                        .HasColumnType(""int"");

                    b.Property<string>(""Created"")
                        .HasColumnType(""longtext"");

                    b.Property<string>(""Title"")
                        .HasColumnType(""longtext"");

                    b.HasKey(""Id"");

                    b.HasIndex(""AuthorId"");

                    b.ToTable(""Books"", (string)null);
                });

            modelBuilder.Entity(""DynamicBuilder.Models.Book"", b =>
                {
                    b.HasOne(""DynamicBuilder.Models.Author"", ""Author"")
                        .WithMany(""Books"")
                        .HasForeignKey(""AuthorId"")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation(""Author"");
                });

            modelBuilder.Entity(""DynamicBuilder.Models.Author"", b =>
                {
                    b.Navigation(""Books"");
                });
#pragma warning restore 612, 618
        }
    }
}
");
            sourceCodeDict.Add("_Migrations\\20240627014605_M638550783631420141.cs", @"using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DynamicBuilder.Migrations
{
    /// <inheritdoc />
    public partial class M638550783631420141 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterDatabase()
                .Annotation(""MySql:CharSet"", ""utf8mb4"");

            migrationBuilder.CreateTable(
                name: ""Authors"",
                columns: table => new
                {
                    Id = table.Column<int>(type: ""int"", nullable: false)
                        .Annotation(""MySql:ValueGenerationStrategy"", MySqlValueGenerationStrategy.IdentityColumn),
                    FirstName = table.Column<string>(type: ""longtext"", nullable: true)
                        .Annotation(""MySql:CharSet"", ""utf8mb4""),
                    LastName = table.Column<string>(type: ""longtext"", nullable: true)
                        .Annotation(""MySql:CharSet"", ""utf8mb4"")
                },
                constraints: table =>
                {
                    table.PrimaryKey(""PK_Authors"", x => x.Id);
                })
                .Annotation(""EntityName"", ""Author"")
                .Annotation(""MySql:CharSet"", ""utf8mb4"");

            migrationBuilder.CreateTable(
                name: ""Books"",
                columns: table => new
                {
                    Id = table.Column<int>(type: ""int"", nullable: false)
                        .Annotation(""MySql:ValueGenerationStrategy"", MySqlValueGenerationStrategy.IdentityColumn),
                    Title = table.Column<string>(type: ""longtext"", nullable: true)
                        .Annotation(""MySql:CharSet"", ""utf8mb4""),
                    AuthorId = table.Column<int>(type: ""int"", nullable: false),
                    Created = table.Column<string>(type: ""longtext"", nullable: true)
                        .Annotation(""MySql:CharSet"", ""utf8mb4"")
                },
                constraints: table =>
                {
                    table.PrimaryKey(""PK_Books"", x => x.Id);
                    table.ForeignKey(
                        name: ""FK_Books_Authors_AuthorId"",
                        column: x => x.AuthorId,
                        principalTable: ""Authors"",
                        principalColumn: ""Id"",
                        onDelete: ReferentialAction.Cascade);
                })
                .Annotation(""EntityName"", ""Book"")
                .Annotation(""MySql:CharSet"", ""utf8mb4"");

            migrationBuilder.CreateIndex(
                name: ""IX_Books_AuthorId"",
                table: ""Books"",
                column: ""AuthorId"")
                .Annotation(""EntityName"", ""Book"");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: ""Books"")
                .Annotation(""EntityName"", ""Book"");

            migrationBuilder.DropTable(
                name: ""Authors"")
                .Annotation(""EntityName"", ""Author"");
        }
    }
}
");
            sourceCodeDict.Add("_Migrations\\20240627014605_M638550783631420141.Designer.cs", @"// <auto-generated />
using DynamicBuilder;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DynamicBuilder.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration(""20240627014605_M638550783631420141"")]
    partial class M638550783631420141
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation(""ProductVersion"", ""8.0.6"")
                .HasAnnotation(""Relational:MaxIdentifierLength"", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity(""DynamicBuilder.Models.Author"", b =>
                {
                    b.Property<int>(""Id"")
                        .ValueGeneratedOnAdd()
                        .HasColumnType(""int"");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>(""Id""));

                    b.Property<string>(""FirstName"")
                        .HasColumnType(""longtext"");

                    b.Property<string>(""LastName"")
                        .HasColumnType(""longtext"");

                    b.HasKey(""Id"");

                    b.ToTable(""Authors"", (string)null);
                });

            modelBuilder.Entity(""DynamicBuilder.Models.Book"", b =>
                {
                    b.Property<int>(""Id"")
                        .ValueGeneratedOnAdd()
                        .HasColumnType(""int"");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>(""Id""));

                    b.Property<int>(""AuthorId"")
                        .HasColumnType(""int"");

                    b.Property<string>(""Created"")
                        .HasColumnType(""longtext"");

                    b.Property<string>(""Title"")
                        .HasColumnType(""longtext"");

                    b.HasKey(""Id"");

                    b.HasIndex(""AuthorId"");

                    b.ToTable(""Books"", (string)null);
                });

            modelBuilder.Entity(""DynamicBuilder.Models.Book"", b =>
                {
                    b.HasOne(""DynamicBuilder.Models.Author"", ""Author"")
                        .WithMany(""Books"")
                        .HasForeignKey(""AuthorId"")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation(""Author"");
                });

            modelBuilder.Entity(""DynamicBuilder.Models.Author"", b =>
                {
                    b.Navigation(""Books"");
                });
#pragma warning restore 612, 618
        }
    }
}
");
        }
        public Assembly Build()
        {
            var references = new[] {
            MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
            MetadataReference.CreateFromFile(typeof(ApplicationDbContext).Assembly.Location),
            MetadataReference.CreateFromFile(Assembly.Load("System").Location),
            MetadataReference.CreateFromFile(Assembly.Load("System.Reflection").Location),
            MetadataReference.CreateFromFile(Assembly.Load("System.Collections").Location),
            MetadataReference.CreateFromFile(Assembly.Load("System.Linq").Location),
            MetadataReference.CreateFromFile(Assembly.Load("System.Linq.Expressions").Location),
            MetadataReference.CreateFromFile(Assembly.Load("System.Runtime").Location),
            MetadataReference.CreateFromFile(Assembly.Load("Microsoft.EntityFrameworkCore").Location),
            MetadataReference.CreateFromFile(Assembly.Load("Microsoft.EntityFrameworkCore.Abstractions").Location),
            MetadataReference.CreateFromFile(Assembly.Load("Microsoft.EntityFrameworkCore.Relational").Location),
            MetadataReference.CreateFromFile(Assembly.Load("Pomelo.EntityFrameworkCore.MySql").Location),
        };

            var syntaxTrees = sourceCodeDict.Select(item =>
            {
                return CSharpSyntaxTree.ParseText(item.Value).WithFilePath(item.Key);
            }).ToList();

            Compilation _compilation = CSharpCompilation.Create(AssemblyName)
                .WithOptions(new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary, optimizationLevel: OptimizationLevel.Release))
                .AddReferences(references)
                .AddSyntaxTrees(syntaxTrees);

            using var ms = new MemoryStream();
            var result = _compilation.Emit(ms);
            ms.Seek(0, SeekOrigin.Begin);

            if (!result.Success)
            {
                IEnumerable<Diagnostic> errors = result.Diagnostics.Where(d => d.IsWarningAsError || d.Severity == DiagnosticSeverity.Error);
                foreach (Diagnostic diagnostic in errors)
                {
                    Console.WriteLine(diagnostic.ToString());
                    throw new Exception("Compilation error");
                }
            }

            Console.WriteLine($"Successfully created Assembly: {AssemblyName}");

            if (_assemblyLoadContext != null)
            {
                _assemblyLoadContext.Unload();
                _assemblyLoadContext = new AssemblyLoadContext(Guid.NewGuid().ToString(), true);
            }

            return _assemblyLoadContext!.LoadFromStream(ms);
        }
    }
}
